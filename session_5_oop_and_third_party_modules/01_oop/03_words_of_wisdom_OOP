    Object-Oriented Programming (OOP) in Python is a programming paradigm that uses
objects and classes to organize software design. It makes it easier to keep your
code modular, reusable, and organized.


### 1. Modular
Modularity refers to the design technique of breaking down a large system into smaller,
independent modules. Each module handles a specific aspect of the system's functionality.

Example: Imagine you're building an application to manage a library. You could create
separate classes for each part of the library system:
    - `Book` to manage book information.
    - `LibraryMember` to manage member data.
    - `Library` to manage the overall lending and returning processes.

Here's how you might define a simple `Book` class:

class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn

Each class (module) handles its own specific responsibilities, making the overall system easier
to manage and understand.



### 2. Reusable
Reusability is the practice of writing code that can be used multiple times without modification.
OOP encourages reusability through the use of classes that can be instantiated as many objects
as needed.

Example: Once you have a `Book` class, you can create multiple book objects from it:

book1 = Book("To Kill a Mockingbird", "Harper Lee", "978-0-06-093546-7")
book2 = Book("1984", "George Orwell", "978-0-452-28423-4")

This reuse of the `Book` class simplifies the development process, reduces errors, and
improves code maintainability.



### 3. Organized
Organization in OOP comes from the ability to closely align code with the real-world model you
are trying to represent. This leads to code that is more intuitive and easier to manage.

Example: Extend the library system with specific classes that interact:

class Library:
    def __init__(self):
        self.books = []  # A list to store books
        self.members = []  # A list to store members

    def add_book(self, book):
        self.books.append(book)

    def register_member(self, member):
        self.members.append(member)

This `Library` class organizes the interaction with books and members, keeping everything
related to library management in one place.

These examples illustrate how using OOP principles can help structure your code in a way that
is modular (easy to segment), reusable (easy to reuse with minimal duplication), and organized
(intuitive and manageable).


        Object-Oriented Programming (OOP) is a programming paradigm that organizes code into objects,
which can contain data (attributes) and procedures (methods) that operate on that data.
In Python, everything is an object, and OOP is a fundamental aspect of the language.
Here's a breakdown of key OOP concepts in Python:

1. Classes:
        A class is a blueprint for creating objects. It defines the attributes and methods that
        the objects will have. You can think of a class as a template or a cookie cutter.


   class Dog:
       def __init__(self, name, age):
           self.name = name
           self.age = age

       def bark(self):
           print(f"{self.name} says Woof!")


2. Objects (Instances):
        An object is an instance of a class. It's a concrete realization of the blueprint
        defined by the class. You create objects from classes.

   my_dog = Dog("Buddy", 3)


3. Attributes:
        Attributes are data stored within a class or instance. They represent the
        characteristics or properties of the object.

   print(my_dog.name)  # Output: Buddy


4. Methods:
        Methods are functions defined within a class. They can operate on the object's data, or
        they can perform other actions relevant to the object.

   my_dog.bark()  # Output: Buddy says Woof!


5. Inheritance:
        Inheritance allows a class (subclass) to inherit attributes and methods from another
        class (superclass). This promotes code reuse and allows for hierarchical organization
        of classes.

   class Labrador(Dog):
       def wag_tail(self):
           print(f"{self.name} wags its tail happily!")


6. Encapsulation:
        Encapsulation is the bundling of data (attributes) and methods that operate on the data
        within a single unit (class). It hides the internal state of the object and only exposes
        a well-defined interface.

7. Polymorphism:
        Polymorphism allows objects of different classes to be treated as objects of a
        common superclass. It enables flexibility and extensibility in code.


   def introduce(pet):
       print(f"This is {pet.name}.")
       pet.bark()

   introduce(my_dog)  # Output: This is Buddy. Buddy says Woof!


8. Abstraction:
        Abstraction focuses on the essential characteristics of an object, while hiding the
        irrelevant details. It helps manage complexity by providing a simplified interface.
