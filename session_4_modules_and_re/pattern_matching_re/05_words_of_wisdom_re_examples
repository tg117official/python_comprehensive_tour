1. Pattern: `\b[A-Za-z]+\b`
   - Explanation: This pattern matches whole words consisting of one or more
     alphabetic characters (both uppercase and lowercase).
     - `\b`: Word boundary anchor ensures that the matched word is surrounded by
             non-word characters or the start/end of the string.
     - `[A-Za-z]+`: Character class matches one or more alphabetic characters.
     - `\b`: Another word boundary anchor.

2. Pattern: `\d{3}-\d{3}-\d{4}`
   - Explanation: This pattern matches a phone number in the format
     XXX-XXX-XXXX, where each X represents a digit.
     - `\d`: Shorthand character class matches any digit.
     - `{3}`: Quantifier matches exactly three occurrences of the preceding element.

3. Pattern: `^\d{5}$`
   - Explanation: This pattern matches a five-digit ZIP code at the beginning
     (`^`) and end (`$`) of the string.
     - `^`: Anchor matches the start of the string.
     - `\d{5}`: Matches exactly five digits.
     - `$`: Anchor matches the end of the string.

4. Pattern: `^\w+@\w+\.\w+$`
   - Explanation: This pattern matches an email address in the format
     local-part@domain.com.
     - `^`: Anchor matches the start of the string.
     - `\w+`: Matches one or more word characters (letters, digits, or underscores).
     - `@`: Literal "@" character.
     - `\w+`: Matches one or more word characters for the domain name.
     - `\.`: Literal dot (period) character.
     - `\w+`: Matches one or more word characters for the top-level domain.
     - `$`: Anchor matches the end of the string.

5. Pattern: `\b\d{1,3}(,\d{3})*\b`
   - Explanation: This pattern matches comma-separated integers with optional
     thousands separators.
     - `\b`: Word boundary anchor.
     - `\d{1,3}`: Matches one to three digits.
     - `(,\d{3})*`: Non-capturing group matches zero or more occurrences of a comma followed by exactly three digits.
     - `\b`: Word boundary anchor.

6. Pattern: `\b[A-Z][a-z]*\b`
   - Explanation: This pattern matches capitalized words, where the first letter is
     uppercase and the rest are lowercase.
     - `\b`: Word boundary anchor.
     - `[A-Z]`: Matches an uppercase letter.
     - `[a-z]*`: Matches zero or more lowercase letters.
     - `\b`: Word boundary anchor.

7. Pattern: `\b\d{1,2}/\d{1,2}/\d{2,4}\b`
   - Explanation: This pattern matches dates in the format mm/dd/yyyy or m/d/yy,
     allowing one or two digits for month and day, and two or four digits for year.
     - `\b`: Word boundary anchor.
     - `\d{1,2}`: Matches one or two digits for month and day.
     - `/`: Literal "/" character.
     - `\d{1,2}`: Matches one or two digits for month and day.
     - `/`: Literal "/" character.
     - `\d{2,4}`: Matches two to four digits for the year.
     - `\b`: Word boundary anchor.

8. Pattern: `^\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}$`
   - Explanation: This pattern matches US phone numbers in various formats,
     including (123) 456-7890, 123-456-7890, 123.456.7890, or 1234567890.
     - `^`: Anchor matches the start of the string.
     - `\(?`: Matches an optional opening parenthesis.
     - `\d{3}`: Matches exactly three digits.
     - `\)?`: Matches an optional closing parenthesis.
     - `[-.\s]?`: Matches an optional dash, dot, or space.
     - `\d{3}`: Matches exactly three digits.
     - `[-.\s]?`: Matches an optional dash, dot, or space.
     - `\d{4}`: Matches exactly four digits.
     - `$`: Anchor matches the end of the string.

9. Pattern: `(?i)python`
   - Explanation: This pattern matches the word "python" case-insensitively.
     - `(?i)`: Inline modifier that turns on case-insensitive matching.
     - `python`: Literal string "python".

10. Pattern: `^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}$`
    - Explanation: This pattern matches a password that contains at least one digit,
      one lowercase letter, one uppercase letter, one non-word character, and is at least eight characters long.
      - `^`: Anchor matches the start of the string.
      - `(?=.*\d)`: Positive lookahead assertion asserts that the string contains at least one digit (`\d`).
      - `(?=.*[a-z])`: Positive lookahead assertion asserts that the string contains at least one lowercase letter.
      - `(?=.*[A-Z])`: Positive lookahead assertion asserts that the string contains at least one uppercase letter.
      - `(?=.*\W)`: Positive lookahead assertion asserts that the string contains at least one non-word character (`\W`).
      - `.{8,}`: Matches any character (`.`) for at least eight (`{8,}`) characters.
      - `$`: Anchor matches the end of the string.
